#!/usr/bin/env bash
##
# Blite is a CLI tool for using bosh-lite and Bosh2
# It is meant to fill in the gaps left by moving from a Vagrant solution and make it relatively painless for developers
# to get a functional Bosh director locally using VirtualBox.
#

VERSION=v0.1.3

CONFIG=${HOME}/.config/blite
MANIFESTS=${CONFIG}/manifests
STATE_FILES=${CONFIG}/state
CREDS_FILES=${CONFIG}/creds
BOSH_DEPLOYMENT_VERSION_FILE=${CONFIG}/bosh_deployment_version_hash.txt
BOSH_DEPLOYMENT_FILES=${CONFIG}/bosh-deployment-files

# Ensure all of the configuration directories exist
mkdir -p ${CONFIG}
mkdir -p ${BOSH_DEPLOYMENT_FILES}
mkdir -p ${MANIFESTS}
mkdir -p ${STATE_FILES}
mkdir -p ${CREDS_FILES}

# Variables the user can override
: "${BLITE_DIRECTOR_CIDR:=192.168.50.0/24}"
: "${BLITE_GATEWAY_IP:=192.168.50.1}"
: "${BLITE_DIRECTOR_IP:=192.168.50.6}"
: "${BLITE_BOSH_DEPLOYMENTS_CIDR:=10.244.0.0/16}"
: "${BLITE_BOSH_DEPLOYMENTS_GATEWAY:=10.244.0.1}"
: "${BOSH_DEPLOYMENT_VERSION_HASH:=$(cat ${BOSH_DEPLOYMENT_VERSION_FILE} 2>/dev/null)}"
: "${BLITE_BOSH_EXECUTABLE:=bosh}"
: "${BLITE_BOSH_ENVIRONMENT:=vbox}"
: "${BLITE_OPS_FILE_GLOB:=}"
: "${BLITE_VARS_FILE_GLOB:=}"

# If a BOSH_DEPLOYMENT_VERSION_HASH hasn't been set, during create blite will perform an automatic update to latest
# master of the bosh-deployment repo. Because that repo isn't strictly versioned, master at times is unstable, especially
# for boshlite. To be non-intrusive set a known working hash here so any first runs (or anytime after running purge) the
# experience will be stable. Users can still override via env variable or writing a different hash to the version file.
# An explict blite update command will still fetch latest master

if [ -z "${BOSH_DEPLOYMENT_VERSION_HASH}" ]; then
  BOSH_DEPLOYMENT_VERSION_HASH="d59edb4d895af0830f0cdee0caf3d7dbbe73b3d9"
  echo ${BOSH_DEPLOYMENT_VERSION_HASH} > ${BOSH_DEPLOYMENT_VERSION_FILE}
fi

# Identify this Bosh director with a unique id and find all relevant files
BLITE_ID=$(echo "$HOSTNAME-$BLITE_DIRECTOR_CIDR-$BLITE_GATEWAY_IP-$BLITE_DIRECTOR_IP" | shasum | awk '{print $1}')
DEPLOYMENT_FILES=${BOSH_DEPLOYMENT_FILES}/${BOSH_DEPLOYMENT_VERSION_HASH}
BLITE_MANIFEST=${MANIFESTS}/${BLITE_ID}.yml
STATE_FILE=${STATE_FILES}/${BLITE_ID}-state.json
CREDS_FILE=${CREDS_FILES}/${BLITE_ID}-creds.yml

if [ -e "${STATE_FILE}" ]; then
  DIRECTOR_MACHINE_ID=$(jq -r '.current_vm_cid' ${STATE_FILE})
fi

if [ ! $(command -v jq) ]; then
  echo -e "\njq not found! It must be installed before proceeding: https://stedolan.github.io/jq/\n"
  exit 1
fi

if [ ! $(command -v curl) ]; then
  echo -e "\ncurl not found! It must be installed before proceeding: https://curl.haxx.se/\n"
  exit 1
fi

if [ ! $(command -v VBoxManage) ]; then
  echo -e "\nVirtualBox and its CLI VBoxManage not found! They must be installed before proceeding: https://virtualbox.org/\n"
  exit 1
fi

if [ ! $(command -v ${BLITE_BOSH_EXECUTABLE}) ]; then
  echo -e "\nBosh CLI not found! It must be installed before proceeding: https://bosh.io/docs/cli-v2.html#install"
  exit 1
elif [ -z "$(${BLITE_BOSH_EXECUTABLE} -v | grep 'version')" ]; then
  echo -e "\nBosh seems to be installed, but is not the correct version. Version 2+ is required https://bosh.io/docs/cli-v2.html#install"
  exit 1
fi

print_director_ip () {
  echo "  BLITE_DIRECTOR_IP: $BLITE_DIRECTOR_IP"
}

print_blite_configuration () {
  print_director_ip
  echo "  BLITE_GATEWAY_IP: $BLITE_GATEWAY_IP"
  echo "  BLITE_DIRECTOR_CIDR: $BLITE_DIRECTOR_CIDR"
  echo "  BLITE_BOSH_DEPLOYMENTS_CIDR: $BLITE_BOSH_DEPLOYMENTS_CIDR"
  echo "  BLITE_BOSH_DEPLOYMENTS_GATEWAY: $BLITE_BOSH_DEPLOYMENTS_GATEWAY"
}

print_good_luck_error () {
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "blite thought this director should exist, but it doesn't seem to be in VirtualBox."
  echo "Good luck with that."
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
}

print_no_director_error () {
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  echo "There doesn't seem to be a bosh-lite director with this configuration:"
  print_blite_configuration
  echo "Try running blite create first."
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
}

print_director_env_config () {
  echo "   export BOSH_CREDS_FILE=$CREDS_FILE;"
  echo "   export BOSH_CA_CERT=\$($BLITE_BOSH_EXECUTABLE interpolate \$BOSH_CREDS_FILE --path /director_ssl/ca);"
  echo "   export BOSH_CLIENT=admin;"
  echo "   export BOSH_CLIENT_SECRET=\$($BLITE_BOSH_EXECUTABLE interpolate \$BOSH_CREDS_FILE --path /admin_password);"
  echo "   export BOSH_ENVIRONMENT=$BLITE_BOSH_ENVIRONMENT;"
}

print_env_info () {
  echo
  echo "*****************************************************************************************************************"
  echo " Manual Setup "
  echo "*****************************************************************************************************************"
  echo "In order for bosh2 to communicate with your new director you'll need to set/update the following environment variables:"
  print_director_env_config
  echo "If you've already got these exported from a previous creation, don't forget to re-source as certs may have been updated!"
  echo
  echo "In order to communicate with the instances deployed by your director you'll have to create a route to them from the host."
  echo "Blite provides this information for convenience, based on the BLITE_BOSH_DEPLOYMENTS_CIDR environment variable."
  echo "It's possible to configure your bosh director in a way that makes this routing information incorrect."
  echo
  echo "The BLITE_BOSH_DEPLOYMENTS_CIDR environment variable is currently set to: $BLITE_BOSH_DEPLOYMENTS_CIDR"
  echo "The command to allow you to access VMS within that CIDR through the Bosh director is:"
  echo "   sudo route add -net $BLITE_BOSH_DEPLOYMENTS_CIDR gw  $BLITE_DIRECTOR_IP #LINUX w/ route command"
  echo "   sudo ip route add   $BLITE_BOSH_DEPLOYMENTS_CIDR via $BLITE_DIRECTOR_IP # Linux (using iproute2 suite)"
  echo "   sudo route add -net $BLITE_BOSH_DEPLOYMENTS_CIDR     $BLITE_DIRECTOR_IP # Mac OS X"
  echo "   route add           $BLITE_BOSH_DEPLOYMENTS_CIDR     $BLITE_DIRECTOR_IP # Windows"
  echo
  echo "*****************************************************************************************************************"
  echo " \"Automatic\" Setup "
  echo "*****************************************************************************************************************"
  echo "To setup your environment so bosh2 can communicate with your new director run or add this command to your .bashrc:"
  echo "  eval \$(blite env-eval)"
  echo
  echo "To setup your route table so you can communicate with instances deployed by your director run:"
  echo "  blite route-add"
  echo
}

print_route_error() {
  echo "Unable to detect route command to use, you'll have to set up routing manually."
  echo "The output of blite config might be helpful. Sorry /shrug"
}

exists_check(){
  if [ -z ${DIRECTOR_MACHINE_ID} ]; then
    echo "No BLite Director found, DIRECTOR_MACHINE_ID environment variable could not be set"
    exit 1
  fi
}

route_add() {
  echo "Adding routes typically requires elevated permissions. You may be prompted for your root password."
  echo "If you'd rather not enter it, run blite config to see the routing commands you can run manually..."
  case $OSTYPE in
    linux-gnu)
      echo "Linux detected"
      if [ $(command -v route) ]; then
         echo "route command available: route"
         echo "Running: sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw ${BLITE_DIRECTOR_IP}"
        sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw  ${BLITE_DIRECTOR_IP} && echo "route added"
      elif [ $(command -v ip) ]; then
        echo "route command available: ip"
        echo "Running: sudo ip route add   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP}"
        sudo ip route add   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP} && echo "route added"
      else
        print_route_error
      fi
    ;;
    darwin*)
      echo "OS X detected"
      echo "Running: sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      sudo route add -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route added"
    ;;
    cygwin|mysys)
      echo "Windows detected"
      echo "Running: route add ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      route add ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route added"
    ;;
    *)
      echo "Could not detect your OS effectively from \$OSTYPE: $OSTYPE"
      print_route_error
    ;;
  esac
}

route_rm() {
  echo "Removing routes requires elevated permissions. You will be prompted for your root password."
  case $OSTYPE in
    linux-gnu)
      echo "Linux detected"
      if [ $(command -v route) ]; then
         echo "route command available: route"
         echo "Running: sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw ${BLITE_DIRECTOR_IP}"
        sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} gw ${BLITE_DIRECTOR_IP} && echo "route removed"
      elif [ $(command -v ip) ]; then
        echo "route command available: ip"
        echo "Running: sudo ip route delete   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP}"
        sudo ip route delete   ${BLITE_BOSH_DEPLOYMENTS_CIDR} via ${BLITE_DIRECTOR_IP} && echo "route removed"
      else
        print_route_error
      fi
    ;;
    darwin*)
      echo "OS X detected"
      echo "Running: sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      sudo route delete -net ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route removed"
    ;;
    cygwin|mysys)
      echo "Windows detected"
      echo "Running: route delete ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP}"
      route delete ${BLITE_BOSH_DEPLOYMENTS_CIDR} ${BLITE_DIRECTOR_IP} && echo "route removed"
    ;;
    *)
      echo "Could not detect your OS effectively from \$OSTYPE: $OSTYPE"
      print_route_error
    ;;
  esac
}

update_bosh_deployment_version () {
  rm -f ${BOSH_DEPLOYMENT_VERSION_FILE}
  echo "Fetching latest version hash for bosh deployment files from github..."
  BOSH_DEPLOYMENT_VERSION_HASH=$( curl https://api.github.com/repos/cloudfoundry/bosh-deployment/commits/master 2>/dev/null | jq -r '.sha')
  echo ${BOSH_DEPLOYMENT_VERSION_HASH} > ${BOSH_DEPLOYMENT_VERSION_FILE}
  DEPLOYMENT_FILES=${BOSH_DEPLOYMENT_FILES}/${BOSH_DEPLOYMENT_VERSION_HASH}
  echo "Hash: $BOSH_DEPLOYMENT_VERSION_HASH"
}

fetch_bosh_deployment_files () {

  if [ -z "${BOSH_DEPLOYMENT_VERSION_HASH}" ]; then
    update_bosh_deployment_version
  fi

  echo "Fetching bosh-deployment manifest and ops-files from github..."
  echo "Writing to: $DEPLOYMENT_FILES"
  mkdir -p ${DEPLOYMENT_FILES}
  echo "Fetching bosh.yml..."
  curl -o ${DEPLOYMENT_FILES}/bosh.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/bosh.yml 2>/dev/null
  echo "  Success"
  echo "Fetching cpi.yml..."
  curl -o ${DEPLOYMENT_FILES}/cpi.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/virtualbox/cpi.yml 2>/dev/null
  echo "  Success"
  echo "Fetching outbound-network.yml..."
  curl -o ${DEPLOYMENT_FILES}/outbound-network.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/virtualbox/outbound-network.yml 2>/dev/null
  echo "  Success"
  echo "Fetching bosh-lite.yml..."
  curl -o ${DEPLOYMENT_FILES}/bosh-lite.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/bosh-lite.yml 2>/dev/null
  echo "  Success"
  echo "Fetching bosh-lite-runc.yml..."
  curl -o ${DEPLOYMENT_FILES}/bosh-lite-runc.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/bosh-lite-runc.yml 2>/dev/null
  echo "  Success"
  echo "Fetching jumpbox-user.yml..."
  curl -o ${DEPLOYMENT_FILES}/jumpbox-user.yml https://raw.githubusercontent.com/cloudfoundry/bosh-deployment/${BOSH_DEPLOYMENT_VERSION_HASH}/jumpbox-user.yml 2>/dev/null
  echo "  Success"
}

deploy_director () {

  # Find operator files
  for file in ${BLITE_OPS_FILE_GLOB}; do
    if [ -e ${file} ]; then
      OPS_FILES+=(-o ${file})
    fi
  done

  # Find vars files
  for file in ${BLITE_VARS_FILE_GLOB}; do
    if [ -e ${file} ]; then
      VARS_FILES+=(-l ${file})
    fi
  done

  ${BLITE_BOSH_EXECUTABLE} interpolate ${DEPLOYMENT_FILES}/bosh.yml \
    -o ${DEPLOYMENT_FILES}/cpi.yml \
    -o ${DEPLOYMENT_FILES}/outbound-network.yml \
    -o ${DEPLOYMENT_FILES}/bosh-lite.yml \
    -o ${DEPLOYMENT_FILES}/bosh-lite-runc.yml \
    -o ${DEPLOYMENT_FILES}/jumpbox-user.yml \
    "${OPS_FILES[@]}" \
    "${VARS_FILES[@]}" \
    --vars-store ${CREDS_FILE} \
    -v director_name="BLite Bosh Director" \
    -v internal_ip=${BLITE_DIRECTOR_IP} \
    -v internal_gw=${BLITE_GATEWAY_IP} \
    -v internal_cidr=${BLITE_DIRECTOR_CIDR}\
    -v outbound_network_name=NatNetwork > ${BLITE_MANIFEST} || exit 1

  if [ ! -e "$BLITE_MANIFEST" ]; then
    echo "No manifest found at $BLITE_MANIFEST..."
    echo "This corrupt state should never have occurred. Good luck."
    exit 1
  fi

  ${BLITE_BOSH_EXECUTABLE} create-env ${BLITE_MANIFEST} \
    --state ${STATE_FILE}

  ${BLITE_BOSH_EXECUTABLE} alias-env ${BLITE_BOSH_ENVIRONMENT} -e https://${BLITE_DIRECTOR_IP} --ca-cert <(${BLITE_BOSH_EXECUTABLE} interpolate ${CREDS_FILE} --path /director_ssl/ca)

  print_env_info
}

destroy_blite_director () {
  if [ ! -e "$BLITE_MANIFEST" ] || [ ! -e "$STATE_FILE" ]; then
    print_no_director_error
    exit 1
  fi

  ${BLITE_BOSH_EXECUTABLE} delete-env ${BLITE_MANIFEST} --state ${STATE_FILE}

  rm -f ${BLITE_MANIFEST} ${STATE_FILE} ${CREDS_FILE}
}

update () {
  update_bosh_deployment_version
  fetch_bosh_deployment_files
}

create () {
  echo "Checking if deployment files have already been downloaded from the bosh-deployment repo, will download if not..."
  if [ -z "$(ls -A ${DEPLOYMENT_FILES})" ]; then
    fetch_bosh_deployment_files
  fi

  if [ ! -e "$BLITE_MANIFEST" ]; then
    echo "Deploying Director..."
    deploy_director
  else
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "There's already a bosh-lite director running with this configuration."
    print_blite_configuration
    echo "Try running blite destroy first."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  fi
}

pause () {
  if [ ! -e ${STATE_FILE} ]; then
    print_no_director_error
    exit 1
  fi

  if [ ! -z "$(VBoxManage list vms -l | grep -e Name: -e State | grep -a1 ${DIRECTOR_MACHINE_ID} | grep running)" ]; then
    echo "Pausing bosh-lite director: ${DIRECTOR_MACHINE_ID}"
    VBoxManage controlvm ${DIRECTOR_MACHINE_ID} pause
  elif [ ! -z "$(VBoxManage list vms | grep ${DIRECTOR_MACHINE_ID})" ]; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "The bosh-lite director is already paused."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  else
    print_good_luck_error
  fi
}

resume () {
  if [ ! -e ${STATE_FILE} ]; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "There doesn't seem to be a bosh-lite director with this configuration:"
    print_blite_configuration
    echo "Try running blite create first."
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    exit 1
  fi

  director_state=$(VBoxManage list vms -l | grep -e Name -e State | grep -A1 ${DIRECTOR_MACHINE_ID})
  echo ${director_state}

  if [ ! -z "$(echo ${director_state} | grep paused)" ]; then
    echo "Resuming bosh-lite director: ${DIRECTOR_MACHINE_ID}"
    VBoxManage controlvm ${DIRECTOR_MACHINE_ID} resume
  elif [ ! -z "$(echo ${director_state} | grep 'powered off')" ]; then
    echo "Director was powered off, attempting to startup and resume"
    VBoxManage startvm ${DIRECTOR_MACHINE_ID} --type headless
    echo "Removing manifest sha from state file to force a redeploy..."
    jq '. | del(.current_manifest_sha)' ${STATE_FILE} > ${STATE_FILE}.tmp && mv ${STATE_FILE}.tmp ${STATE_FILE}
    ${BLITE_BOSH_EXECUTABLE} create-env ${BLITE_MANIFEST} --state ${STATE_FILE}
    echo "Because your director was powered off and not paused you might need to run bosh cck"
  elif [ ! -z "$(VBoxManage list runningvms | grep ${DIRECTOR_MACHINE_ID})" ]; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "The bosh-lite director is already running."
    print_director_ip
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  else
    print_good_luck_error
    echo "director VBox ID: ${DIRECTOR_MACHINE_ID}"
  fi

}

purge () {
  echo "Completely removing configuration and state cache from $CONFIG"
  rm -r ${CONFIG}
}

status () {
  exists_check
  echo "Blite ID:        $BLITE_ID"
  VBoxManage list vms -l | grep -e Name -e State | grep -A1 ${DIRECTOR_MACHINE_ID}
}

update_cloud_config(){
  exists_check
  echo "Setting bare bones cloud-config based warden and local network settings, you can override this manually at anytime"
  CLOUD_CONFIG_DNS=8.8.8.8

  # Get all local DNS servers that are not loopback
  LOCAL_DNS_LIST=$(cat /etc/resolv.conf | grep nameserver | grep -v "127.*" | awk '{print $2}' | paste -s -d", " -)


  if [ ! -z "${LOCAL_DNS_LIST}" ]; then
    CLOUD_CONFIG_DNS="${CLOUD_CONFIG_DNS},${LOCAL_DNS_LIST}"
  fi
  # write out a basic cloud-config that is aware of your existing network settings
  cat >${DEPLOYMENT_FILES}/cloud-config.yml <<EOL
azs:
- name: z1
- name: z2
- name: z3

vm_types:
- name: default

disk_types:
- name: default
  disk_size: 1024

networks:
- name: default
  type: manual
  subnets:
  - azs: [z1, z2, z3]
    dns: [${CLOUD_CONFIG_DNS}]
    range: ${BLITE_BOSH_DEPLOYMENTS_CIDR}
    gateway: ${BLITE_BOSH_DEPLOYMENTS_GATEWAY}
    reserved: []

compilation:
  workers: 5
  az: z1
  reuse_compilation_vms: true
  vm_type: default
  network: default
EOL

  bosh update-cloud-config ${DEPLOYMENT_FILES}/cloud-config.yml
}

snapshot() {
  exists_check
  timestamp=$(date +%Y-%m-%d-%H-%M-%S)
  snapshot_name=${1:-$timestamp}
  VBoxManage snapshot ${DIRECTOR_MACHINE_ID} take ${snapshot_name} --live
}

snapshots() {
  exists_check
  VBoxManage snapshot ${DIRECTOR_MACHINE_ID} list
}

restore() {
  exists_check
  if [ -z "$1" ]; then
    echo "Must pass a snapshot name to restore. Use blite snapshots to list all available."
    exit 1
  fi
  snapshot_uuid=$(VBoxManage snapshot ${DIRECTOR_MACHINE_ID} list | grep $1 | awk '{print substr($4, 1, length($4)-1)}')
  VBoxManage controlvm ${DIRECTOR_MACHINE_ID} poweroff
  VBoxManage snapshot ${DIRECTOR_MACHINE_ID} restore $snapshot_uuid
  VBoxManage startvm ${DIRECTOR_MACHINE_ID} --type headless
}

case $1 in
    create)
      create
      exit 0
    ;;
    destroy)
      destroy_blite_director
      exit 0
    ;;
    pause)
      pause
      exit 0
    ;;
    resume)
      resume
      exit 0
    ;;
    update)
      update
      exit 0
    ;;
    status)
      status
      exit 0
    ;;
    config)
      print_env_info
      exit 0
    ;;
    networking)
      print_blite_configuration
      exit 0
    ;;
    env-eval)
      print_director_env_config
      exit 0
    ;;
    route-add)
      route_add
      exit 0
    ;;
    route-rm)
      route_rm
      exit 0
    ;;
    cloud-config)
      update_cloud_config
      exit 0
    ;;
    snapshot)
      snapshot $2
    ;;
    snapshots)
      snapshots
      exit 0
    ;;
    restore)
      restore $2
      exit 0
    ;;
    purge)
      purge
      exit 0
    ;;
    *)
      echo "blite $VERSION"
      echo "A script to help manage a bosh-lite deployment."
      echo
      echo "Available Environment Variables:"
      echo "  BLITE_DIRECTOR_CIDR: The CIDR of the director's subnet ($BLITE_DIRECTOR_CIDR)"
      echo "  BLITE_BOSH_DEPLOYMENTS_CIDR: The CIDR of the subnet where the director deploys instances ($BLITE_BOSH_DEPLOYMENTS_CIDR)"
      echo "  BLITE_BOSH_DEPLOYMENTS_GATEWAY: The gateway address of the subnet where the director deploys instances ($BLITE_BOSH_DEPLOYMENTS_GATEWAY)"
      echo "  BLITE_GATEWAY_IP: The gateway for the director's subnet ($BLITE_GATEWAY_IP)"
      echo "  BLITE_DIRECTOR_IP: The IP of the director ($BLITE_DIRECTOR_IP)"
      echo "  BLITE_BOSH_EXECUTABLE: The name of the bosh cli binary blite will use ($BLITE_BOSH_EXECUTABLE)"
      echo "  BLITE_OPS_FILE_GLOB: Optional parameter that allows a user to pass in operator files during director creation. ('')"
      echo "  BLITE_VARS_FILE_GLOB: Optional parameter that allows a user to pass in vars files during director creation. ('')"
      echo
      echo "create"
      echo "usage: blite create"
      echo "Creates a new Bosh Director using the BLITE_* environment variable settings"
      echo
      echo "pause"
      echo "usage: blite pause"
      echo "Pauses the running blite Bosh director"
      echo
      echo "resume"
      echo "usage: blite resume"
      echo "Restarts a blite Bosh director that was paused or shut off"
      echo
      echo "status"
      echo "usage: blite status"
      echo "Outputs information about the blite Bosh director. Like it's name whether or not it's running, paused, etc."
      echo
      echo "destroy"
      echo "Usage: blite destroy"
      echo "Destroys the blite Bosh director"
      echo
      echo "cloud-config"
      echo "usage: blite cloud-config"
      echo "Sets a bare bones cloud-config for bosh-lite and warden based on your current network settings."
      echo
      echo "snapshot"
      echo "usage: blite snapshot [name]"
      echo "  name - The name of the snapshot, defaults to timestamp"
      echo "Snapshots a running blite Bosh director"
      echo
      echo "snapshots"
      echo "usage: blite snapshots"
      echo "Lists available snapshots"
      echo
      echo "restore"
      echo "usage: blite restore snap-name"
      echo "  snap-name - The name (or UUID) of the snapshot to restore."
      echo "Restores the blite Bosh director to a previous snapshotted state. Use blite snapshots for a list of "
      echo "available snapshots."
      echo
      echo "config"
      echo "usage: blite config"
      echo "Outputs BOSH settings and routes needed to communicate with the running blite Bosh director."
      echo
      echo "networking"
      echo "usage: blite networking"
      echo "Outputs blite environment variable settings that control networking (director IP, gateway IP, deployments CIDR, etc)."
      echo
      echo "purge"
      echo "usage: blite purge"
      echo "Deletes all blite director data."
      echo
      echo "env-eval"
      echo "usage: eval \$(blite env-eval)"
      echo "A helper method to seed your environment with Bosh configuration options. Useful when added "
      echo "to: ~/.bashrc files and such. If not used with and eval call this method will just output text"
      echo
      echo "route-add"
      echo "usage: blite route-add"
      echo "A helper method that tries to add a route to your routes table so you can access deployed bosh-lite "
      echo "instances from your host machine. Uses the BLITE_BOSH_DEPLOYMENTS_CIDR and BLITE_DIRECTOR_IP "
      echo "environment variables."
      echo
      echo "route-rm"
      echo "usage: blite route-rm"
      echo "A helper method that tries to remove a route from your routes table preventing you from accessing deployed "
      echo "bosh-lite instances from your host machine. Uses the BLITE_BOSH_DEPLOYMENTS_CIDR and BLITE_DIRECTOR_IP "
      echo "environment variables."
      echo
      echo "update"
      echo "usage: blite update"
      echo "Updates the Bosh deployment manifest files used for bosh-lite with the latest available on GitHub."
      echo
    ;;
esac

